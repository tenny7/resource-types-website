name: Website Deployment
on:
 push:
  branches: [master]
 
jobs:
  test-backend:
   env:
     GH_TOKEN: ${{ secrets.GH_TOKEN }}
   name: test-backend
   runs-on: ubuntu-18.04
   steps:
     - name: Checkout
       uses: actions/checkout@v2.3.4
       with:
         ref: master 
         token: ${{ secrets.GH_TOKEN }}
         persist-credentials: true
         clean: true

     - name: Setup Go environment
       uses: actions/setup-go@v2.1.4
       with:
         go-version: '^1.17.1' # The Go version to download
         stable: ' false'
         token: ${{ secrets.GH_TOKEN }}

     - name: Yarn Setup
       uses: DerYeger/yarn-setup-action@v1.0.1

     - name: Run Go and ginkgo Command
       run: |
        git submodule update --init
        cd warehouse && ls -la
        go install github.com/onsi/ginkgo/ginkgo && ginkgo -r -keepGoing .
        
   
   
  test-frontend:
    name: test-frontend
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: master
          token: ${{ secrets.GH_TOKEN }} 
          persist-credentials: true
          clean: true
          
      - name: Yarn Setup
        uses: DerYeger/yarn-setup-action@v1.0.1
          
      - name: Test the frontend
        run: |
         ls -la
         cd warehouse && yarn install && yarn test
                          
  build-and-deploy:
    name: build-and-deploy
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: master
          token: ${{ secrets.GH_TOKEN }} 
          persist-credentials: true
          clean: true
          submodules: recursive
    
      - name: Pull and build the required resource-types submodules
        run: |
          git submodule update --init --recursive
          
      - name: Setup Go environment
        uses: actions/setup-go@v2.1.4
        with:
          go-version: '^1.17.1' # The Go version to download
          stable: ' false'
      - name: Yarn Setup
        uses: DerYeger/yarn-setup-action@v1.0.1
        
      - name: Check Directory
        env:
         GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |   
         ls -la
         
         
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@1.0.8
        with:
          # Docker Version
          docker_version: 20.10
          # Docker Channel
          docker_channel: stable
          # Enable Buildx
          docker_buildx: true
          # docker cli experimental
          docker_cli_experimental: enabled
      - name: Test Docker   
        run: |
         docker version
         
      - name: Check Directory path
        run: |
         ls -la
               
      - name: Docker Compose Action
        uses: isbang/compose-action@v1.0.0
        with:
          compose-file: ./docker-compose.yml
          # additional options to pass to `docker-compose down` command
          down-flags: none
      - name: Run Docker Compose File to build project
        env: 
         PORT: 80
        run: |
         ls -la
         docker-compose up --build --detach
        
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          token: ${{ secrets.GH_TOKEN }}
          # This is the branch you wish to deploy to, for example gh-pages or docs.
          branch: gh_pages
          # The folder in your repository that you want to deploy. If your build script compiles into a directory named build you would put it here. Folder paths cannot have a leading / or ./. If you wish to deploy the root directory you can place a . here.
          folder: warehouse/web/public/
      
          
      
         
      
      
      
